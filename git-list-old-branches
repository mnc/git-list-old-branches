#!/bin/bash

VERSION='0.1.0'

usage_exit() {
  cat <<EOF
Usage:
    $(basename "${0}") -b YYYY-MM-DD [Options]

Requires:
    -b    List branches before this date (YYYY-MM-DD)

Options:
    -v    Version
    -h    Show help of this command
    -a    List local branches and tracking branches if specified
          List only local branches if not specified
EOF
  exit "$1"
}

while getopts :b:vha OPT
do
  case $OPT in
    "v") 
      version_flag="TRUE"
      ;;
    "h") 
      help_flag="TRUE"
      ;;
    "a") 
      all_flag="TRUE"
      ;;
    "b") 
      opt_b="$OPTARG"
      ;;
    *)
      invalid_opt_flag="TRUE"
      ;;
  esac
done

if [ "$version_flag" = "TRUE" ]; then
  echo $VERSION
  exit
fi

[ "$help_flag" = "TRUE" ] && usage_exit 0
[ "$invalid_opt_flag" = "TRUE" ] && usage_exit 1
[ -z "$opt_b" ] && usage_exit 1


passed_ms() {
  local base_second=$(date -j -f "%Y-%m-%d" "$1" "+%s")
  local compared_second=$(date -j -f "%Y-%m-%d" "$2" "+%s")
  expr "$compared_second" - "$base_second"
}

filter_branch() {
  local last_commit_date=$(git --no-pager log "$1" -1 --format=%cd --date=short)
  local passed_millisec=$(passed_ms "$opt_b" "$last_commit_date")
  [ "$passed_millisec" -lt 0 ] && echo "$1"
}

output_all_branches() {
  local branch
  for branch in $(git for-each-ref --format='%(refname:short)' refs/heads refs/remotes); do
    filtered_branch=$(filter_branch "$branch")
    [ -n "$filtered_branch" ] && echo "$filtered_branch"
  done
}

output_local_branches() {
  local branch
  for branch in $(git for-each-ref --format='%(refname:short)' refs/heads); do
    filtered_branch=$(filter_branch "$branch")
    [ -n "$filtered_branch" ] && echo "$filtered_branch"
  done
}

if [ "$all_flag" = "TRUE" ]; then
  output_all_branches
else
  output_local_branches
fi
